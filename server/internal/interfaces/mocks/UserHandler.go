// Code generated by mockery v2.18.0. DO NOT EDIT.

package mocks

import (
	fiber "github.com/gofiber/fiber/v2"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	model "ipw-app/internal/model"
)

// UserHandler is an autogenerated mock type for the UserHandler type
type UserHandler struct {
	mock.Mock
}

// GetUserByID provides a mock function with given fields: id, db
func (_m *UserHandler) GetUserByID(id string, db *gorm.DB) (*model.User, error) {
	ret := _m.Called(id, db)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(string, *gorm.DB) *model.User); ok {
		r0 = rf(id, db)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *gorm.DB) error); ok {
		r1 = rf(id, db)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: data, db, secretKey, c
func (_m *UserHandler) Login(data map[string]string, db *gorm.DB, secretKey string, c *fiber.Ctx) error {
	ret := _m.Called(data, db, secretKey, c)

	var r0 error
	if rf, ok := ret.Get(0).(func(map[string]string, *gorm.DB, string, *fiber.Ctx) error); ok {
		r0 = rf(data, db, secretKey, c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Logout provides a mock function with given fields: c
func (_m *UserHandler) Logout(c *fiber.Ctx) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Register provides a mock function with given fields: data, db
func (_m *UserHandler) Register(data map[string]string, db *gorm.DB) (*model.User, error) {
	ret := _m.Called(data, db)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(map[string]string, *gorm.DB) *model.User); ok {
		r0 = rf(data, db)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(map[string]string, *gorm.DB) error); ok {
		r1 = rf(data, db)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// User provides a mock function with given fields: db, secretKey, c
func (_m *UserHandler) User(db *gorm.DB, secretKey string, c *fiber.Ctx) error {
	ret := _m.Called(db, secretKey, c)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string, *fiber.Ctx) error); ok {
		r0 = rf(db, secretKey, c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUserHandler interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserHandler creates a new instance of UserHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserHandler(t mockConstructorTestingTNewUserHandler) *UserHandler {
	mock := &UserHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
